/*
  Watchwinder.cpp - Smart Watch Winder
  
  Copyright (C) 2020  Davide Perini
  
  Permission is hereby granted, free of charge, to any person obtaining a copy of 
  this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
  copies of the Software, and to permit persons to whom the Software is 
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in 
  all copies or substantial portions of the Software.
  
  You should have received a copy of the MIT License along with this program.  
  If not, see <https://opensource.org/licenses/MIT/>.
  Components:
    - Arduino C++ sketch running on an ESP8266EX D1 Mini from Lolin running at 160MHz
    - Raspberry + Home Assistant for Web GUI, automations and MQTT server
    - ULN2003 BYJ48 Stepper motor  
    - SD1306 OLED 128x64 pixel 0.96"
    - 1000uf capacitor for 5V power stabilization
    - Google Home Mini for Voice Recognition  
*/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Version.h"
#include "Configuration.h"
#include "BootstrapManager.h"
#include <ESP8266Ping.h>


/****************** BOOTSTRAP and WIFI MANAGER ******************/
BootstrapManager bootstrapManager;
Helpers helper;

/**************************** PIN DEFINITIONS **************************************************/
// Initialize the display
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); 

#define OLED_RESET LED_BUILTIN // Pin used for integrated D1 Mini blue LED
#define IN1 14 //GPIO 14 (D5)
#define IN2 12 //GPIO 12 (D6)
#define IN3 13 //GPIO 13 (D7)
#define IN4 15 //GPIO 15 (D8)
const int NBSTEPS = 4095;
unsigned int steptime = 2500;
int rotationNumber = 300;
int numbersOfRotationDone = 0;
int remainingRotation = 300;
int rotationDelayPeriord = 2000;
int Step = 0;
String MISTO = "Misto";
String ORARIO = "Orario";
String ANTIORARIO = "Antiorario";
String orientation = MISTO;
boolean anticlockwise = true;
String keepItWound = "false";
String rebootState = OFF_CMD;

boolean showLastPage = false;

// all magnet are low, motor is off
int arrayDefault[4] = {LOW, LOW, LOW, LOW};

// matrix needed for the rotor rotation. loop it fast and you'll move the rotor
// NOTE: faster is weaker
int stepsMatrix[8][4] = {
  {LOW, LOW, LOW, HIGH},
  {LOW, LOW, HIGH, HIGH},
  {LOW, LOW, HIGH, LOW},
  {LOW, HIGH, HIGH, LOW},
  {LOW, HIGH, LOW, LOW},
  {HIGH, HIGH, LOW, LOW},
  {HIGH, LOW, LOW, LOW},
  {HIGH, LOW, LOW, HIGH},
};

unsigned long lastTime = 0L;
unsigned long thistime = 0L;

/************* MQTT TOPICS **************************/
const char* SMARTOSTAT_CLIMATE_STATE_TOPIC = "stat/smartostat/CLIMATE";
const char* WATCHWINDER_STAT_REBOOT = "stat/watchwinder/reboot"; 
const char* WATCHWINDER_CMND_REBOOT = "cmnd/watchwinder/reboot"; 
const char* WATCHWINDER_CMND_SHOWLASTPAGE = "cmnd/watchwinder/OLEDINFO"; 
#ifdef TARGET_WATCHWINDER_1
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_1/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_1/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_1/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_1/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_1/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_1/INFO";
#endif
#ifdef TARGET_WATCHWINDER_2
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_2/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_2/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_2/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_2/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_2/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_2/INFO"; 
#endif 
#ifdef TARGET_WATCHWINDER_3
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_3/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_3/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_3/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_3/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_3/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_3/INFO"; 
#endif 
#ifdef TARGET_WATCHWINDER_4
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_4/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_4/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_4/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_4/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_4/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_4/INFO"; 
#endif 
#ifdef TARGET_WATCHWINDER_5
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_5/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_5/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_5/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_5/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_5/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_5/INFO"; 
#endif 
#ifdef TARGET_WATCHWINDER_6
  const char* WATCHWINDER_CMND_POWER = "cmnd/watchwinder_6/POWER"; 
  const char* WATCHWINDER_STAT_POWER = "stat/watchwinder_6/POWER"; 
  const char* WATCHWINDER_SETTINGS = "cmnd/watchwinder_6/SETTINGS"; 
  const char* WATCHWINDER_CMND_TOPIC = "cmnd/watchwinder_6/DISPLAY_POWER"; 
  const char* WATCHWINDER_STATE_TOPIC = "stat/watchwinder_6/DISPLAY_POWER";
  const char* WATCHWINDER_INFO_TOPIC = "stat/watchwinder_6/INFO"; 
#endif 

// Display state
bool stateOn = true;
bool stepperMotorOn = false;
bool moving = false;

// Total Number of pages
const int numPages = 2;
const int delay_5_minute = 300000;
int currentPage = 0;
int offset = 160;
unsigned long currentMicros;
int stepsLeft;
bool showHaSplashScreen = true;
String hours = EMPTY_STR;
String minutes = EMPTY_STR;
// variable used for faster delay instead of arduino delay(), this custom delay prevent a lot of problem and memory leak
const int tenSecondsPeriod = 10000;
unsigned long timeNowStatus = 0;
const int fiveMinutesPeriod = 300000;
unsigned long timeNowGoHomeAfterFiveMinutes = 0;
unsigned long timeNowWriteStorageMinute = 0;
unsigned long timeNowManageStepperMotorAfterSeconds = 0;

// 'counter (3)', 44x44px
const unsigned char counterLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 
	0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x0e, 0x00, 0x0f, 0x39, 0xe7, 0x00, 0x0e, 0x00, 0x0f, 0x30, 0xe7, 0x00, 0x0e, 0x00, 
	0x0f, 0x00, 0xe7, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0xc7, 0x00, 0x0e, 0x00, 0x0f, 0x01, 0xc7, 0x00, 
	0x0e, 0x07, 0x0f, 0x03, 0x87, 0x00, 0x0e, 0x1f, 0x0f, 0x07, 0x07, 0x00, 0x0e, 0x3f, 0x0f, 0x0e, 
	0x07, 0x00, 0x0e, 0x03, 0x0f, 0x1c, 0x07, 0x00, 0x0e, 0x03, 0x0f, 0x3c, 0x07, 0x00, 0x0e, 0x03, 
	0x0f, 0x3f, 0xe7, 0x00, 0x0e, 0x03, 0x0f, 0x3f, 0xe7, 0x00, 0x0e, 0x03, 0x0f, 0x00, 0x07, 0x00, 
	0x0e, 0x03, 0x0f, 0x00, 0x07, 0x00, 0x0e, 0x03, 0x0f, 0x02, 0x07, 0x00, 0x0e, 0x03, 0x0f, 0x1f, 
	0xc7, 0x00, 0x0e, 0x03, 0x0f, 0x3f, 0xc7, 0x00, 0x0e, 0x03, 0x0f, 0x38, 0xe7, 0x00, 0x0e, 0x00, 
	0x0f, 0x00, 0xe7, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0xc7, 0x00, 0x0e, 0x00, 0x0f, 0x07, 0xc7, 0x00, 
	0x0e, 0x00, 0x0f, 0x07, 0x87, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define counterLogoW  44
#define counterLogoH  44

// 'speedometer (1)', 28x28px
const unsigned char speedometerLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xf1, 0x00, 0x07, 0xf0, 0xc7, 0x00, 0x07, 0xc0, 0x1e, 0x00, 
	0x0f, 0x00, 0x3c, 0x00, 0x1e, 0x00, 0xfd, 0x80, 0x1e, 0x03, 0xf9, 0x80, 0x3c, 0x0f, 0xfb, 0xc0, 
	0x3c, 0x1f, 0xf3, 0xc0, 0x38, 0x3f, 0xf1, 0xc0, 0x38, 0x3f, 0xe1, 0xc0, 0x38, 0x3f, 0xc1, 0xc0, 
	0x38, 0x3f, 0xc1, 0xc0, 0x38, 0x1f, 0x81, 0xc0, 0x3c, 0x0f, 0x03, 0xc0, 0x1c, 0x00, 0x03, 0x80, 
	0x1e, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x0e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define speedometerLogoW  28
#define speedometerLogoH  28

// 'speedometer-medium', 28x28px
const unsigned char speedometerMediumLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0xe6, 0x70, 0x00, 0x01, 0xef, 0x78, 0x00, 0x07, 0xef, 0x7e, 0x00, 0x07, 0xcf, 0x3e, 0x00, 
	0x0f, 0x0f, 0x0f, 0x00, 0x1e, 0x1f, 0x87, 0x80, 0x1c, 0x1f, 0x83, 0x80, 0x3c, 0x1f, 0x83, 0xc0, 
	0x3c, 0x1f, 0x83, 0xc0, 0x38, 0x3f, 0xc1, 0xc0, 0x38, 0x3f, 0xc1, 0xc0, 0x38, 0x3f, 0xc1, 0xc0, 
	0x38, 0x3f, 0xc1, 0xc0, 0x38, 0x1f, 0x81, 0xc0, 0x3c, 0x0f, 0x03, 0xc0, 0x1c, 0x00, 0x03, 0x80, 
	0x1e, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x0e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define speedometerMediumLogoW  28
#define speedometerMediumLogoH  28

// 'speedometer-slow', 28x28px
const unsigned char speedometerSlowLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0xff, 0xf0, 0x00, 0x08, 0xff, 0xf8, 0x00, 0x0e, 0x30, 0xfe, 0x00, 0x07, 0x80, 0x3e, 0x00, 
	0x03, 0xc0, 0x0f, 0x00, 0x1b, 0xf0, 0x07, 0x80, 0x19, 0xfc, 0x07, 0x80, 0x3d, 0xff, 0x03, 0xc0, 
	0x3c, 0xff, 0x83, 0xc0, 0x38, 0xff, 0xc1, 0xc0, 0x38, 0x7f, 0xc1, 0xc0, 0x38, 0x3f, 0xc1, 0xc0, 
	0x38, 0x3f, 0xc1, 0xc0, 0x38, 0x1f, 0x81, 0xc0, 0x3c, 0x0f, 0x03, 0xc0, 0x1c, 0x00, 0x03, 0x80, 
	0x1e, 0x00, 0x07, 0x80, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x0e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define speedometerSlowLogoW  28
#define speedometerSlowLogoH  28

// 'watch-vibrate', 28x28px
const unsigned char watchLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
	0x1c, 0x7f, 0xe3, 0x80, 0x1c, 0x70, 0xe3, 0x80, 0xdc, 0xc0, 0x33, 0xb0, 0xdd, 0xc0, 0x3b, 0xb0, 
	0xdd, 0x80, 0x1b, 0xb0, 0xdd, 0x80, 0x1b, 0xb0, 0xdd, 0x80, 0x1b, 0xb0, 0xdd, 0x80, 0x1b, 0xb0, 
	0xdd, 0xc0, 0x3b, 0xb0, 0xdc, 0xc0, 0x33, 0xb0, 0x1c, 0x70, 0xe3, 0x80, 0x1c, 0x7f, 0xe3, 0x80, 
	0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
	0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define watchLogoW  28
#define watchLogoH  28

// 'watch-vibrate-off', 28x28px
const unsigned char watchOffLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x70, 0x1f, 0x80, 0x00, 
	0x38, 0x3f, 0xc0, 0x00, 0x1c, 0x3f, 0xc0, 0x00, 0x0e, 0x3f, 0xc0, 0x00, 0x07, 0x1f, 0xc0, 0x00, 
	0x1f, 0x8f, 0xe3, 0x80, 0x1d, 0xc0, 0xe3, 0x80, 0xdc, 0xe0, 0x33, 0xb0, 0xdd, 0xf0, 0x3b, 0xb0, 
	0xdd, 0xb8, 0x1b, 0xb0, 0xdd, 0x9c, 0x1b, 0xb0, 0xdd, 0x8e, 0x1b, 0xb0, 0xdd, 0x87, 0x1b, 0xb0, 
	0xdd, 0xc3, 0x83, 0xb0, 0xdc, 0xc1, 0xc3, 0xb0, 0x1c, 0xf0, 0xe3, 0x80, 0x1c, 0x7f, 0xf1, 0x80, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xdc, 0x00, 0x00, 0x3f, 0xce, 0x00, 0x00, 0x3f, 0xc7, 0x00, 
	0x00, 0x1f, 0x83, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define watchOffLogoW  28
#define watchOffLogoH  28

// 'arrow-left-bold', 14x14px
const unsigned char arrowLeftLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x1f, 0xf0, 0x3f, 0xf0, 0x3f, 0xf0, 
	0x1f, 0xf0, 0x0e, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define arrowLeftLogoW  14
#define arrowLeftLogoH  14

// 'arrow-right-bold', 14x14px
const unsigned char arrowRightLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x80, 0x01, 0xc0, 0x3f, 0xe0, 0x3f, 0xf0, 0x3f, 0xf0, 
	0x3f, 0xe0, 0x01, 0xc0, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define arrowRightLogoW  14
#define arrowRightLogoH  14

// 'arrow-right-bold', 14x14px
const unsigned char arrowRightActionLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xc0, 0x60, 0xe0, 0x7f, 0xf0, 0x7f, 0xf8, 0x7f, 0xf8, 
	0x7f, 0xf0, 0x60, 0xe0, 0x40, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00
};
#define arrowRightActionLogoW  14
#define arrowRightActionLogoH  14

// 'arrow-right-bold', 14x14px
const unsigned char arrowLeftActionLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0c, 0x08, 0x1c, 0x18, 0x3f, 0xf8, 0x7f, 0xf8, 0x7f, 0xf8, 
	0x3f, 0xf8, 0x1c, 0x18, 0x0c, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define arrowLeftActionLogoW  14
#define arrowLeftActionLogoH  14

// 'pause-circle-outline (2)', 36x36px
const unsigned char pauseLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0xfe, 
	0x07, 0xf0, 0x00, 0x01, 0xf0, 0x00, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x03, 0xc0, 0x00, 
	0x3c, 0x00, 0x07, 0x80, 0x00, 0x1e, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x0e, 0x07, 0x9e, 0x07, 
	0x00, 0x0e, 0x07, 0x9e, 0x07, 0x00, 0x1e, 0x07, 0x9e, 0x07, 0x80, 0x1c, 0x07, 0x9e, 0x03, 0x80, 
	0x1c, 0x07, 0x9e, 0x03, 0x80, 0x1c, 0x07, 0x9e, 0x03, 0x80, 0x1c, 0x07, 0x9e, 0x03, 0x80, 0x1c, 
	0x07, 0x9e, 0x03, 0x80, 0x1c, 0x07, 0x9e, 0x03, 0x80, 0x1e, 0x07, 0x9e, 0x07, 0x80, 0x0e, 0x07, 
	0x9e, 0x07, 0x00, 0x0e, 0x07, 0x9e, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x80, 0x00, 
	0x1e, 0x00, 0x03, 0xc0, 0x00, 0x3c, 0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x01, 0xf0, 0x01, 0xf8, 
	0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 
	0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};
#define pauseLogoW  36
#define pauseLogoH  36

// 'power (1)', 44x44px
const unsigned char powerLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x02, 
	0x00, 0x00, 0x00, 0x0e, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x0f, 0x80, 0x00, 0x00, 0x3e, 
	0x0f, 0x07, 0xc0, 0x00, 0x00, 0x7c, 0x0f, 0x03, 0xe0, 0x00, 0x00, 0x78, 0x0f, 0x01, 0xe0, 0x00, 
	0x00, 0xf8, 0x0f, 0x01, 0xf0, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x0f, 0x00, 
	0xf0, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x78, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x78, 0x00, 0x01, 0xe0, 
	0x0f, 0x00, 0x78, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x78, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x78, 0x00, 
	0x01, 0xe0, 0x00, 0x00, 0x78, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 
	0xf0, 0x00, 0x00, 0xf8, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x78, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x7c, 
	0x00, 0x03, 0xe0, 0x00, 0x00, 0x3e, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x1f, 0x80, 0x1f, 0x80, 0x00, 
	0x00, 0x0f, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define powerLogoW  44
#define powerLogoH  44

/********************************** FUNCTION DECLARATION (NEEDED BY PLATFORMIO WHILE COMPILING CPP FILES) *****************************************/
// Bootstrap functions
void callback(char* topic, byte* payload, unsigned int length);
void manageDisconnections();
void manageQueueSubscription();
void manageHardwareButton();
// Project specific functions
bool processSmartostatClimateJson(StaticJsonDocument<BUFFER_SIZE> json);
bool processDisplayCmnd(StaticJsonDocument<BUFFER_SIZE> json);
bool processCmndPower(StaticJsonDocument<BUFFER_SIZE> json);
bool processCmndSettings(StaticJsonDocument<BUFFER_SIZE> json);
void drawRoundRect();
void drawCenterScreenLogo(bool &triggerBool, const unsigned char *logo, const int logoW, const int logoH, const int delayInt);
void sendPowerState();
void sendMotorPowerState();
void readConfigFromStorage();
void writeConfigToStorage();
void sendRebootState(String onOff);
void sendRebootCmnd();
bool processRebootCmnd(StaticJsonDocument<BUFFER_SIZE> json);
bool processShowLastPageCmnd(StaticJsonDocument<BUFFER_SIZE> json);
void writeStep(int outArray[4]);
void stepper();
void setDirection();
void stepperMotorManager();
void triggerScreenSaverAfterFiveMinutes();
void writeConfigToStorageAfterMinute();
void manageStepperMotorEverySeconds();
void draw();
void drawOrShutDownDisplay();
